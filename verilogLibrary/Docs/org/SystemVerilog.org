::Usage note this docuent should promaraly to store example code.

* ASSERTIONS

** Why do we need assertions?

*** To verify your design meets the specification.

** Sequence understanding
*** Assertions are evaluated in observed region, Which happens after NBA region. 

** Can assertions be defined into separate file and latter binded to the main 

*** TODO DUT instantiation needs to be replaced with bind instance.

** What are the differnt types of assertions?

*** Immediate and Concurrent assertions.

** Give example of immediate assertion?

*** Syntax

** Give example of concurrent asserions? Define different layers?

*** Syntax

**** Sequence

**** Property

**** Directive

*** Boolean, sequence, property and directive.

** Wildcard characters used for defining sequences. 
[[http://www.testbench.in/AS_06_SEQUENCES.html][Ref: TESTBENCH.IN]]

*** ##[n:$] specifies that delay from between n cycles later and till the end of simulation. 

*** REQ[*4]  This example specifies that ack shell come after req comes 4 times consecutively. 

*** req[->3]##1 ack  last req and ack should come together

*** req[=3]##1 ack  last req should come one clock before ack comes.

*** Seq1 and seq2 

*** seq1 or seq2 

*** Seq1 intersect seq2 

*** Seq1 within seq2 

*** first_match(seq1) 

*** A throughout seq1 

*** @(posedge sysclk) reset ##1 inst ##1 e1.ended ##1 branch_back;


** Why do you need implication operator? Since the same can be defined using sequence.

*** If sequence is formed from implication statement then the  atecendent portion of this sequence will always fail the assertion.

** TODO How it can be used inside of clocking block?

** TODO In which blocks assertions can be defined?





* COVERAGE

** TODO  Different types of ceverages?

*** Functional coverage, Code Coverage, Toggle Coverage, Branch Coverage.

** TODO In which all places covergroup can be made use of?

** Syntax for covergroup?

** Syntax for coverpoint?

** Types of coverpoint?

*** explicit bins, cross coverage, illegal bins, ignore bins, Wildcard bins, Transition bins.

*** TODO Coverproperty

**** http://www.verilab.com/files/dac2005_mal_sva_cov_paper_a4.pdf[]


* RANDOMIZATION 

** randomize is a virtual method .

** super.pre/post_randomize() needs to be called explicitly.

** rand_mode() can be used to turn off randomization.

** overiding constraint block 

* ARRAYS

** Fixed Arrays

*** Initialization : using array literal

**** Unpacked:
     int descend [5];
     descend = Õ{9, 8, default:-1};
     int md[2][3] = Õ{Õ{0,1,2}, Õ{3,4,5}};

**** Packed:
     bit [3:0] [7:0] barray [3];
     bit [31:0] lw = 32Õh0123_4567;
     barray[0] = lw;

*** Basic operations

**** for - foreach
     for (int i=0; i<$size(src); i++)
     foreach (md[i,j])

**** Copy and Compare
     // Aggregate compare the two arrays
     // Aggregate copy all src values to dst
**** Find size of the array. $size()
     
** Dynamic Arrays
   Initialization : same as done for Fixed array
  bit [7:0] mask[] = Õ{8Õb0000_0000, 8Õb0000_0001,
  8Õb0000_0011, 8Õb0000_0111,
  8Õb0000_1111, 8Õb0001_1111,
  8Õb0011_1111, 8Õb0111_1111,
  8Õb1111_1111};

*** Basic operation

**** Resizing
     dyn = new[20](dyn); // dyn is put at the begining of the array.

**** Deleting 
dyn.delete();
**** Find size of the array . $size, dyn.size()
     
     
** Associative Arrays

*** Randomly select index

*** Find size of the array $size()

** Queues

*** Initialization
    q[$] = {0,2,5};
    
*** Basic operation
    q.insert(1, j);
    q.insert(3, q2);
    q.delete(1);
    q.push_front(6);
    j = q.pop_back;
    q.push_back(8);
    j = q.pop_front;
    q = {};

*** Find sizze of the array
    

    
* CASTING

** Downcasting -- It is needed to access the members of child. With base handle it is possible to access the member/property of child class.

* STREAMING
  This is used to convert packed array into bit streeam.


* EVENT REGIONS:

[[https://stackoverflow.com/questions/21315650/event-scheduling-in-verilog?newreg=0c0e2e22310a4392b04df02117a7d8a9][Inactive Region Example]]
Blocking and non-Blocking event trigger.

* CLOCKING BLOCK
[[https://www.doulos.com/knowhow/sysverilog/tutorial/clocking/][Dolus- Introduction to CB]]

** Clocking blocks are used to describe sampling and drive skew for input and output , as seen from TB.

** TODO Modports for TB will have same direction as TB , while modports for DUT will be reversed.

** @(if.clk) is same as @(posedge clk)

** ## can be used for describing cycles.

* TB CHEAT SHEET

** Generators

*** Generate packets using constraint 

** Drivers

*** Using call back

** Monitors

** Scoreboard

** DUT





