* About
This example demonstrates the data trasnfer b/w two sequences.
DUT is a SDM(Synchronous dual port memory).




		       +-------------------------------------------------------------------------------------------------------------------------+
		       |                                                                                                                      	 |
		       |         ENV                                      +-------------+                                                        |
		       |                                                  | SCB         |                                                        |
		       |                                              +---+             +------+                                                 |
		       |                                              |   +-------------+      |                                                 |
		       |     +----------------------------------------+------------------------+---------------------------------------+	 |
		       |     |                                        |                        |                        -              |         |
		       |     |     +-----+                            |                        +                       +------+        |         |
		       |     |     | DRV |                         +--+--+                   +-+---+                   |DRV   |        |         |
		       |     |     | wr  +-------+                 |MON	 |                   |MON  |                   +rd    |        |         |
		       |     |     |     |       |             +---+ wr  |                   |rd   +-----+             |      |        |         |
		       |     |     +-----+       |             |   +-----+                   +-----+     |             +--+---+        |         |
		       +-----+-------------------+-------------+-----------------------------------------+----------------+------------+---------+
			                         |             |                 			 |		  |
						 |	  -+---+--+		+----------+	      +--+--+		  |
						 |	   |      |		|      	   |	      |     |		  |
						 |	   |      +-------------+      	    ----------  rd  +-------------+
						 +---------+ wr	  |		|   DUT	   |   	      | i/f |
							   | i/f  |		|      	   |	      |     |
							   |      |		|   SDM    |	      |     |
							   |      |		|          |	      |     |
							   |      |		|  Memory  |	      |     |
							   |      |		|          |	      |     |
							   +------+		|          |	      +-----+
										|          |
										|          |
										|          |
										|          |
										|          |
										|          |	 +
										|          |	 +
										+----------+ - \   



										

* Sequnece Item
* Sequence

** Create separeate sequence for read and write
** Write sequence - Write all locations
** Read Sequence - Read all locations, once write sequence is complete
** Start sequeces on respective sequencer
** Use -> event write_done. Check if event var is not required if the sequences can be launcehed sequentially.
** TODO To check if the sequence is blocked while run a particular sequencer.
** TODO Understand the driver sequncer handshake.
** TODO List all uvm macros used for starting sequences.
** TODO Check if body task is implicitly virtual


* Driver

* Monitor

* Sequencer

** TODO Explore TLM wrt interaction between driver and sequencer.
** TODO Run multiple parallel sequences on a single sequencer.

* Agent

* Env

* Test

* Design

* Interfaces

* Test Top

* Tasks
** TODO Fix interface related code.

     virtual function void build_phase(uvm_phase phase);
       super.build_phase(phase);
       `uvm_info("TRACE", $sformatf("%m"), UVM_HIGH);
       env = rw_env::type_id::create("env", this);

	uvm_config_db#(virtual router_io)::set(this, "env.agent", "vif", router_test_top.router_if);
	uvm_config_db#(virtual router_io)::set(this, "env.i_agt[*]", "vif", router_test_top.router_if);
	uvm_config_db #(uvm_object_wrapper)::set(this, "env.h_agt.sqr.main_phase", "default_sequence", host_bfm_sequence::get_type());
     endfunction: build_phase

   [[file:~/GitHub/Work/verilogLibrary/UVM_examples/EdaplaygroundBackup/VirtualSequenceExample/rw_test.sv::virtual%20function%20void%20build_phase(uvm_phase%20phase);%20super.build_phase(phase);%20`uvm_info("TRACE",%20$sformatf("%25m"),%20UVM_HIGH);%20env%20=%20rw_env::type_id::create("env",%20this);%20uvm_config_db#(virtual%20router_io)::set(this,%20"env.agent",%20"vif",%20router_test_top.router_if);%20uvm_config_db#(virtual%20router_io)::set(this,%20"env.i_agt%5B*%5D",%20"vif",%20router_test_top.router_if);%20uvm_config_db%20#(uvm_object_wrapper)::set(this,%20"env.h_agt.sqr.main_phase",%20"default_sequence",%20host_bfm_sequence::get_type());%20endfunction:%20build_phase]]
