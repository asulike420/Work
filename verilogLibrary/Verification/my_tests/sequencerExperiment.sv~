
import uvm_pkg::*;
`include "uvm_macros.svh"

//typedef class instruction_sequencer; //Forward referencing

class instruction extends uvm_sequence_item; 
typedef enum {PUSH_A,PUSH_B,ADD,SUB,MUL,DIV,POP_C} inst_t; 
rand inst_t inst; 

`uvm_object_utils_begin(instruction) 
`uvm_field_enum(inst_t,inst, UVM_ALL_ON) 
`uvm_object_utils_end 

function new (string name = "instruction"); 
super.new(name); //Need to understand why this super new needs to be called with name
endfunction 

endclass // instruction




class operation_addition extends uvm_sequence #(instruction); 

//instruction req; 

function new(string name="operation_addition"); 
super.new(name); 
endfunction 

//`uvm_sequence_utils(operation_addition, instruction_sequencer) 
  `uvm_object_utils(operation_addition)
virtual task body(); 
//req = instruction::type_id::create("req"); 
//wait_for_grant(); 
//assert(req.randomize() with { 
//inst == instruction::PUSH_A; 
//}); 
//send_request(req);
//      $display(" Waiting for item done");
//   wait_for_item_done();
//   
//   $display("Done waiting for item");
//   
////get_response(res); This is optional. Not using in this example. 
//
//req = instruction::type_id::create("req"); 
//wait_for_grant(); 
//req.inst = instruction::PUSH_B; 
//send_request(req); 
//wait_for_item_done(); 
////get_response(res); 
//
//req = instruction::type_id::create("req"); 
//wait_for_grant(); 
//req.inst = instruction::ADD; 
//send_request(req); 
//wait_for_item_done(); 
////get_response(res); 
//
//req = instruction::type_id::create("req"); 
//wait_for_grant(); 
//req.inst = instruction::POP_C; 
//send_request(req); 
//wait_for_item_done(); 
////get_response(res);
   `uvm_do(req);
   
endtask 

endclass // operation_addition


